import re

from aiogram import types

from bot_app import messages
from bot_app.admin.users_list import get_registered_users
from bot_app.app import dp, bot, db, db_applications
from bot_app.keybords import inline_continue
from bot_app.my_local_settings import ADMIN

from datetime import datetime, timedelta


# Application accepted
@dp.callback_query_handler(lambda c: c.data == "answer_yes", state="*")
async def button_click_call_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    user_id = int(re.findall("[0-9]+", callback_query.message["text"])[0])
    username = re.findall("[@]\w*", callback_query.message["text"])[0]

    string_id = " " + str(user_id)
    registered_users_list = [int(x) for x in get_registered_users().split()]

    # Add user in list
    if user_id not in registered_users_list:
        with open("bot_app/admin/settings/registered_users.txt", "a") as file_users:
            file_users.write(string_id)

        await bot.send_message(
            callback_query.from_user.id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ‚Ññ {user_id} {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.",
        )

        await bot.send_message(
            user_id,
            messages.APROVED,
            reply_markup=inline_continue,
        )

        db_applications.update_application_submitted(
            user_id,
            application_submitted=False,
        )

    # User exists in list
    elif user_id in registered_users_list:
        await bot.send_message(
            callback_query.from_user.id,
            f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, —Ç.–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ‚Ññ {user_id} {username} —É–∂–µ –≤ –í–∞—à–µ–π –≥—Ä—É–ø–ø–µ.",
        )


# Application declined
@dp.callback_query_handler(lambda c: c.data == "answer_no", state="*")
async def button_click_call_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    user_id = int(re.findall("[0-9]+", callback_query.message["text"])[0])
    username = re.findall("[@]\w*", callback_query.message["text"])[0]

    registered_users_list = [int(x) for x in get_registered_users().split()]

    if user_id not in registered_users_list:

        await bot.send_message(
            callback_query.from_user.id,
            f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ‚Ññ {user_id} {username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        )

        await bot.send_message(
            user_id,
            messages.DECLINED,
        )

        db_applications.update_application_submitted(
            user_id,
            application_submitted=False,
        )

    # User exists in list
    elif user_id in registered_users_list:
        await bot.send_message(
            callback_query.from_user.id,
            f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç.–∫ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ‚Ññ {user_id} {username} –≥—Ä—É–ø–ø—É.",
        )


# Transaction approve
@dp.callback_query_handler(lambda c: c.data == "approve_transaction", state="*")
async def button_click_call_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    limit_time = callback_query.message.date + timedelta(hours=24)
    user_id = int(re.findall("[0-9]+", callback_query.message["text"])[0])
    username = re.findall("[@]\w*", callback_query.message["text"])[0]
    reviewed = db.get_subscriptions_reviewed(user_id)[0][0]

    if (
        callback_query.from_user.id == ADMIN
        and reviewed == False
        and datetime.now() < limit_time
    ):

        db.update_subscription_reviewed_and_approve(user_id=user_id, approve=True)

        await bot.send_message(
            callback_query.from_user.id,
            f"üí∞‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ‚Ññ {user_id} {username} –æ–¥–æ–±—Ä–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!",
        )

    elif (
        callback_query.from_user.id == ADMIN
        and reviewed
        and datetime.now() < limit_time
    ):
        await bot.send_message(
            callback_query.from_user.id,
            f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ‚Ññ {user_id} {username} –æ–¥–æ–±—Ä–µ–Ω–∏–µ\–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—ã–ª–æ —É–∂–µ –í–∞–º–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.",
        )

    elif callback_query.from_user.id == ADMIN and datetime.now() >= limit_time:
        await bot.send_message(
            callback_query.from_user.id,
            f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (24 —á.) –í–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ.",
        )


# Transaction reject
@dp.callback_query_handler(lambda c: c.data == "reject_transaction", state="*")
async def button_click_call_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    limit_time = callback_query.message.date + timedelta(hours=24)
    user_id = int(re.findall("[0-9]+", callback_query.message["text"])[0])
    username = re.findall("[@]\w*", callback_query.message["text"])[0]
    reviewed = db.get_subscriptions_reviewed(user_id)[0][0]

    if (
        callback_query.from_user.id == ADMIN
        and reviewed == False
        and datetime.now() < limit_time
    ):

        db.update_subscription_reviewed_and_approve(user_id=user_id, approve=False)

        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ‚Ññ {user_id} {username} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ !",
        )

    elif (
        callback_query.from_user.id == ADMIN
        and reviewed
        and datetime.now() < limit_time
    ):
        await bot.send_message(
            callback_query.from_user.id,
            f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ‚Ññ {user_id} {username} –æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—ã–ª–æ —É–∂–µ –í–∞–º–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.",
        )

    elif callback_query.from_user.id == ADMIN and datetime.now() >= limit_time:
        await bot.send_message(
            callback_query.from_user.id,
            f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (24 —á.) –í–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ.",
        )
